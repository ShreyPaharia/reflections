---LESSON -2 --
	all the data or metadata about previous versions is stored in a repository called .git 
as it starts with a period sign , it is hidden from the users as they dont have to interact with it directly

-COMMIT --
	a commit is a snapshot of a git repository

MAKING A GIT REPOSITORY ---
	git init 
the directory we are in is made the repository.

STATUS OF THE REPOSITORY -
	git status 
returns the status of the last made commits and the rank of current repository

STAGING AREA ---
	there is an area between the actual directory and the it repository in which we can add files and then when we commit only changes to these files are comitted .
this helps us to choose the files from directory which needs to be commited instead of always commiting all the files

ADDING FILES TO STAGING AREA --
	git add 

COMMITING FILES --
	git commit
commits all the files present in staging area .

COMMIT MESSAGES ---
	commit messages are in the form of commands instead of actions i.e. it is "edit" instead of "edited" .

FINDING DIFFERENCE BETWEEN 
	FILES IN STAGING AREA AND WORKING DIRECTORY
		git diff
git diff without any arguments gives this result
	FILES IN STAGING AREA AND LAST COMMITS
		git diff --staged

BRANCHES ---
	can be used when we want to test some experimental features or some other features in which u have to change a lot of data .

DISPLAYING BRANCHES --- 
	git branch
to show all the branches 

CREATING BRANCHES ---
	git branch <branch_name>

OPENING BRANCHES ---
	git checkout <branch_name>

REACHABILITY --- 
	if we are on a particular branch and we do git log only the ids of the commits in a straight line of that branch can be seen none of the branches would be listed
	none of the changes made in different branches would be visible in the other branch

MERGING TWO BRANCHES ---
	git merge <branch1_name> <branch2_name>

FINDING THE CHANGE INTRODUCED IN A PARTICULAR COMMIT -
	git show <commit_id>
in this way we can find the changes introduced without the commit id of parent

DELETING A BRANCH ---
	git branch -d <branch_id> 
deletes the branch label only but if there if no other reference to the commit then the branch cannot be accessed .

ABORTING A MERGE --- 
	git merge --abort 
